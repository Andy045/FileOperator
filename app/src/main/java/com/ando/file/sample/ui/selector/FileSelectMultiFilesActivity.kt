package com.ando.file.sample.ui.selector

import ando.file.androidq.FileOperatorQ.getBitmapFromUri
import android.annotation.SuppressLint
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.text.TextUtils
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import ando.file.compressor.ImageCompressPredicate
import ando.file.core.*
import ando.file.compressor.OnImageCompressListener
import ando.file.compressor.OnImageRenameListener
import ando.file.compressor.ImageCompressor
import ando.file.core.FileGlobal.OVER_SIZE_LIMIT_ALL_EXCEPT
import com.ando.file.sample.R
import ando.file.core.FileGlobal.OVER_SIZE_LIMIT_EXCEPT_OVERFLOW_PART
import ando.file.core.FileGlobal.dumpMetaData
import ando.file.core.FileOpener.openFileBySystemChooser
import ando.file.core.FileUri.getFilePathByUri
import ando.file.selector.*
import com.ando.file.sample.REQUEST_CHOOSE_FILE
import com.ando.file.sample.getCompressedImageCacheDir
import com.ando.file.sample.utils.PermissionManager
import kotlinx.android.synthetic.main.activity_file_operator.*
import java.io.File
import java.math.BigInteger
import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.util.*

/**
 * Title: FileSelectFilesMultiActivity
 *
 * Description: Â§öÈÄâÊñá‰ª∂
 *
 * @author javakam
 * @date 2020/5/19  16:04
 */
@SuppressLint("SetTextI18n")
class FileSelectMultiFilesActivity : AppCompatActivity() {

    private var mFileSelector: FileSelector? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_file_operator)
        title = "Â§öÈÄâÊñá‰ª∂"

        mBtOpenMediaFile.visibility = View.VISIBLE

        mBtChooseMultiFiles.visibility = View.VISIBLE
        mBtChooseMultiFiles.setOnClickListener {
            PermissionManager.requestStoragePermission(this) {
                if (it) chooseFile()
            }
        }
    }

    @Suppress("DEPRECATION")
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        mTvError.text = ""
        mTvResult.text = ""
        mIvOrigin.setImageBitmap(null)
        mIvCompressed.setImageBitmap(null)

        mFileSelector?.obtainResult(requestCode, resultCode, data)
    }

    /*
    Â≠óËäÇÁ†ÅËÆ°ÁÆóÂô® -> https://calc.itzmx.com/
       3M  = 3145728  Byte
       5M  = 5242880  Byte
       10M = 10485760 Byte
       20M = 20971520 Byte
    */
    private fun chooseFile() {
        //ÂõæÁâá
        val optionsImage = FileSelectOptions().apply {
            fileType = FileType.IMAGE
            minCount = 1
            maxCount = 2
            minCountTip = "Ëá≥Â∞ëÈÄâÊã©‰∏ÄÂº†ÂõæÁâá"
            maxCountTip = "ÊúÄÂ§öÈÄâÊã©‰∏§Âº†ÂõæÁâá"
            fileTypeMismatchTip = "Êñá‰ª∂Á±ªÂûã‰∏çÂåπÈÖç"
            singleFileMaxSize = 5242880
            singleFileMaxSizeTip = "ÂçïÂº†ÂõæÁâáÊúÄÂ§ß‰∏çË∂ÖËøá5MÔºÅ"
            allFilesMaxSize = 10485760
            allFilesMaxSizeTip = "ÂõæÁâáÊÄªÂ§ßÂ∞è‰∏çË∂ÖËøá10MÔºÅ"
            fileCondition = object : FileSelectCondition {
                override fun accept(fileType: FileType, uri: Uri?): Boolean {
                    return (fileType == FileType.IMAGE && uri != null && !uri.path.isNullOrBlank() && !FileUtils.isGif(uri))
                }
            }
        }

        //Èü≥È¢ë
        val optionsVideo = FileSelectOptions().apply {
            fileType = FileType.AUDIO
            minCount = 2
            maxCount = 3
            minCountTip = "Ëá≥Â∞ëÈÄâÊã©‰∏§‰∏™Èü≥È¢ëÊñá‰ª∂"
            maxCountTip = "ÊúÄÂ§öÈÄâÊã©‰∏â‰∏™Èü≥È¢ëÊñá‰ª∂"
            singleFileMaxSize = 20971520
            singleFileMaxSizeTip = "ÂçïÈü≥È¢ëÊúÄÂ§ß‰∏çË∂ÖËøá20MÔºÅ"
            allFilesMaxSize = 31457280
            allFilesMaxSizeTip = "Èü≥È¢ëÊÄªÂ§ßÂ∞è‰∏çË∂ÖËøá30MÔºÅ"
            fileCondition = object : FileSelectCondition {
                override fun accept(fileType: FileType, uri: Uri?): Boolean {
                    return (uri != null)
                }
            }
        }

        mFileSelector = FileSelector
            .with(this)
            .setRequestCode(REQUEST_CHOOSE_FILE)
            .setMultiSelect()//ÈªòËÆ§ÊòØÂçïÈÄâfalse

            /*
            ÂÆûÈôÖÊúÄÂ∞ëÊï∞ÈáèÈôêÂà∂‰∏∫ setMinCount Âíå (optionsImage.minCount + optionsVideo.minCount) ‰∏≠ÁöÑÊúÄÂ∞èÂÄº
            ÂÆûÈôÖÊúÄÂ§ßÊï∞ÈáèÈôêÂà∂‰∏∫ setMaxCount Âíå (optionsImage.maxCount + optionsVideo.maxCount) ‰∏≠ÁöÑÊúÄÂ§ßÂÄº
             */
            .setMinCount(1, "ËÆæÂÆöÁ±ªÂûãÊñá‰ª∂Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™!")
            .setMaxCount(4, "ÊúÄÂ§öÈÄâÂõõ‰∏™Êñá‰ª∂!")

            /*
            ÂÆûÈôÖÂçïÊñá‰ª∂Â§ßÂ∞èÈôêÂà∂‰∏∫ setSingleFileMaxSize Âíå (optionsImage.singleFileMaxSize + optionsVideo.singleFileMaxSize) ‰∏≠ÁöÑÊúÄÂ∞èÂÄº
            ÂÆûÈôÖÊÄªÂ§ßÂ∞èÈôêÂà∂‰∏∫ setAllFilesMaxSize Âíå (optionsImage.allFilesMaxSize + optionsVideo.allFilesMaxSize) ‰∏≠ÁöÑÊúÄÂ§ßÂÄº
             */
            // ‰ºòÂÖà‰ΩøÁî® `Ëá™ÂÆö‰πâFileSelectOptions` ‰∏≠ËÆæÁΩÆÁöÑÂçïÊñá‰ª∂Â§ßÂ∞èÈôêÂà∂, Â¶ÇÊûúÊ≤°ÊúâËÆæÁΩÆÂàôÈááÁî®ËØ•ÂÄº
            .setSingleFileMaxSize(2097152, "ÂçïÊñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá2MÔºÅ")
            .setAllFilesMaxSize(52428800, "ÊÄªÊñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá50MÔºÅ")

            //Tip: ÁõÆÂâçÊï∞ÈáèÂíåÂ§ßÂ∞èÈôêÂà∂ÈÉΩÁî®ÁöÑËØ•Á≠ñÁï•,‰∏çÂ•Ω..ÂêéÈù¢‰ºöÂàÜÂà´Êèê‰æõÊé•Âè£Âπ∂ÊîπÊàêËÆæÁΩÆÂ∏ÉÂ∞îÂÄºÁöÑÊñπÂºè
            //1.OVER_SIZE_LIMIT_ALL_EXCEPT            Êñá‰ª∂Ë∂ÖËøáÊï∞ÈáèÈôêÂà∂ÂíåÂ§ßÂ∞èÈôêÂà∂Áõ¥Êé•ËøîÂõûÂ§±Ë¥•(onError)
            //2.OVER_SIZE_LIMIT_EXCEPT_OVERFLOW_PART  Êñá‰ª∂Ë∂ÖËøáÊï∞ÈáèÈôêÂà∂ÂíåÂ§ßÂ∞èÈôêÂà∂‰øùÁïôÊú™Ë∂ÖÈôêÂà∂ÁöÑÊñá‰ª∂Âπ∂ËøîÂõû,ÂéªÊéâÂêéÈù¢Ê∫¢Âá∫ÁöÑÈÉ®ÂàÜ(onSuccess)
            .setOverSizeLimitStrategy(OVER_SIZE_LIMIT_ALL_EXCEPT)

            .setMimeTypes(arrayOf("audio/*","image/*"))//Âêå"*/*",ÈªòËÆ§‰∏çÂÅöÊñá‰ª∂Á±ªÂûãÁ∫¶Êùü, ‰∏çÂêåÁ±ªÂûãÁ≥ªÁªüÊèê‰æõÁöÑÈÄâÊã©UI‰∏ç‰∏ÄÊ†∑ eg: arrayOf("video/*","audio/*","image/*")
            .applyOptions(optionsImage, optionsVideo)

            // ‰ºòÂÖà‰ΩøÁî® FileSelectOptions ‰∏≠ËÆæÁΩÆÁöÑ FileSelectCondition
            .filter(object : FileSelectCondition {
                override fun accept(fileType: FileType, uri: Uri?): Boolean {
                    return when (fileType) {
                        FileType.IMAGE -> (uri != null && !uri.path.isNullOrBlank() && !FileUtils.isGif(uri))
                        FileType.VIDEO -> true
                        FileType.AUDIO -> true
                        else -> true
                    }
                }
            })
            .callback(object : FileSelectCallBack {
                override fun onSuccess(results: List<FileSelectResult>?) {
                    FileLogger.w("ÂõûË∞É onSuccess ${results?.size}")
                    mTvResult.text = ""
                    if (results.isNullOrEmpty()) return

                    showSelectResult(results)
                }

                override fun onError(e: Throwable?) {
                    FileLogger.e("ÂõûË∞É onError ${e?.message}")
                    mTvError.text = mTvError.text.toString().plus(" ÈîôËØØ‰ø°ÊÅØ: ${e?.message} \n")
                }
            })
            .choose()
    }

    private fun showSelectResult(results: List<FileSelectResult>) {
        mTvResult.text = ""
        results.forEach {
            val info = "${it}Ê†ºÂºèÂåñ : ${FileSizeUtils.formatFileSize(it.fileSize)}\n"
            FileLogger.w("FileOptions onSuccess  \n $info")

            mTvResult.text = mTvResult.text.toString().plus(
                """ÈÄâÊã©ÁªìÊûú : ${FileType.INSTANCE.typeByUri(it.uri)} 
                    |---------
                    |üëâÂéüÊñá‰ª∂
                    |$info
                    |""".trimMargin()
            )
        }
        //ÊµãËØïÊâìÂºÄÈü≥Èü≥È¢ëÊñá‰ª∂
        mBtOpenMediaFile.setOnClickListener {
            openFileBySystemChooser(this, results[0].uri)
        }

        results.forEach {
            val uri = it.uri ?: return@forEach
            when (FileType.INSTANCE.typeByUri(uri)) {
                FileType.IMAGE -> {
                    //ÂéüÂõæ
                    val bitmap = getBitmapFromUri(uri)
                    mIvOrigin.setImageBitmap(bitmap)
                    mIvOrigin.setOnClickListener {
                        openFileBySystemChooser(this, uri)
                    }
                    //ÂéãÁº©(Luban)
                    val photos = mutableListOf<Uri>()
                    photos.add(uri)
                    compressImage(photos) //or Engine.compress(uri,  100L)
                }
                FileType.VIDEO -> {
                    //loadThumbnail(uri, 100, 200)?.let { b -> mIvOrigin.setImageBitmap(b) }
                }
                else -> {
                }
            }
        }
    }

    /**
     * ÂéãÁº©ÂõæÁâá 1.LubanÁÆóÊ≥ï; 2.Áõ¥Êé•ÂéãÁº© -> Engine.compress(uri,  100L)
     *
     * T ‰∏∫ String.filePath / Uri / File
     */
    private fun <T> compressImage(photos: List<T>) {
        ImageCompressor
            .with(this)
            .load(photos)
            .ignoreBy(100)//B
            .setTargetDir(getCompressedImageCacheDir())
            .setFocusAlpha(false)
            .enableCache(true)
            .filter(object : ImageCompressPredicate {
                override fun apply(uri: Uri?): Boolean {
                    FileLogger.i("image predicate $uri  ${getFilePathByUri(uri)}")
                    return if (uri != null) {
                        val path = getFilePathByUri(uri)
                        !(TextUtils.isEmpty(path) || (path?.toLowerCase(Locale.getDefault())?.endsWith(".gif") == true))
                    } else false
                }
            })
            .setRenameListener(object : OnImageRenameListener {
                override fun rename(uri: Uri?): String? {
                    try {
                        val filePath = getFilePathByUri(uri)
                        val md = MessageDigest.getInstance("MD5")
                        md.update(filePath?.toByteArray() ?: return "")
                        return BigInteger(1, md.digest()).toString(32)
                    } catch (e: NoSuchAlgorithmException) {
                        e.printStackTrace()
                    }
                    return ""
                }
            })
            .setImageCompressListener(object : OnImageCompressListener {
                override fun onStart() {}
                override fun onSuccess(index: Int, uri: Uri?) {
                    val path = "$cacheDir/image/"
                    FileLogger.i("compress onSuccess  uri=$uri  path=${uri?.path}  ÂéãÁº©ÂõæÁâáÁºìÂ≠òÁõÆÂΩïÊÄªÂ§ßÂ∞è=${FileSizeUtils.getFolderSize(File(path))}")

                    val bitmap = getBitmapFromUri(uri)
                    dumpMetaData(uri) { displayName: String?, size: String? ->
                        runOnUiThread {
                            mTvResult.text = mTvResult.text.toString().plus(
                                "\n ---------\nüëâÂéãÁº©Âêé \n Uri : $uri \n Ë∑ØÂæÑ: ${uri?.path} \n Êñá‰ª∂ÂêçÁß∞ Ôºö$displayName \n Â§ßÂ∞èÔºö$size B \n" +
                                        "Ê†ºÂºèÂåñ : ${FileSizeUtils.formatFileSize(size?.toLong() ?: 0L)}\n ---------"
                            )
                        }
                    }
                    mIvCompressed.setImageBitmap(bitmap)
                }

                override fun onError(e: Throwable?) {
                    FileLogger.e("compress onError ${e?.message}")
                }
            }).launch()
    }

}