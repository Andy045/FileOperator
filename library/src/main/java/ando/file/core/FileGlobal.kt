package ando.file.core

import ando.file.FileOperator
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.CancellationSignal
import android.os.ParcelFileDescriptor
import android.provider.OpenableColumns
import androidx.annotation.IntDef
import androidx.annotation.StringDef
import androidx.fragment.app.Fragment

/**
 * Êñá‰ª∂ÁöÑËÆøÈóÆÊ®°Âºè mode :
 *
 * 1. ‚Äúr‚ÄùË°®Á§∫Âè™ËØªËÆøÈóÆÔºå
 *
 * 2. ‚Äúw‚ÄùË°®Á§∫Âè™ÂÜôËÆøÈóÆ(Êì¶Èô§Êñá‰ª∂‰∏≠ÂΩìÂâçÁöÑ‰ªª‰ΩïÊï∞ÊçÆ)Ôºå‚Äúwa‚ÄùË°®Á§∫Âè™ÂÜôËÆøÈóÆÔºå‰ª•ËøΩÂä†Âà∞‰ªª‰ΩïÁé∞ÊúâÊï∞ÊçÆÔºå
 *
 * 3. ‚Äúrw‚ÄùË°®Á§∫ÂØπ‰ªª‰ΩïÁé∞ÊúâÊï∞ÊçÆÁöÑËØªÂÜôËÆøÈóÆÔºå‚Äúrwt‚ÄùË°®Á§∫ÂØπ‰ªª‰ΩïÁé∞ÊúâÊñá‰ª∂ÁöÑËØªÂÜôËÆøÈóÆ„ÄÇ
 *
 *
 * > Access mode for the file.  May be "r" for read-only access,
 * "w" for write-only access (erasing whatever data is currently in
 * the file), "wa" for write-only access to append to any existing data,
 * "rw" for read and write access on any existing data, and "rwt" for read
 * and write access that truncates any existing file.
 *
 * See android.os.ParcelFileDescriptor#openInternal
 *  [https://www.man7.org/linux/man-pages/man2/open.2.html](https://www.man7.org/linux/man-pages/man2/open.2.html)
 */
internal const val PATH_SUFFIX = ".andoFileProvider"
internal const val HIDDEN_PREFIX = "."

internal fun noNull(s: String?): String = if (s.isNullOrBlank()) "" else s

internal fun isActivityLive(activity: Activity?): Boolean {
    return activity != null && !activity.isFinishing && !activity.isDestroyed
}

internal fun startActivity(context: Any, intent: Intent) {
    if (context is Activity) {
        if (isActivityLive(context)) {
            context.startActivity(intent)
        }
    } else if (context is Fragment) {
        val activity = context.activity
        if (isActivityLive(activity)) {
            context.startActivity(intent)
        }
    } else if (context is Context) {
        (context as? Context)?.startActivity(intent)
    }
}

object FileGlobal {

    const val MODE_READ_ONLY = "r"
    const val MODE_WRITE_ONLY_ERASING = "w"
    const val MODE_WRITE_ONLY_APPEND = "wa"
    const val MODE_READ_WRITE_DATA = "rw"
    const val MODE_READ_WRITE_FILE = "rwt"

    @Retention(AnnotationRetention.SOURCE)
    @StringDef(value = [MODE_READ_ONLY, MODE_WRITE_ONLY_ERASING, MODE_WRITE_ONLY_APPEND, MODE_READ_WRITE_DATA, MODE_READ_WRITE_FILE])
    annotation class FileOpenMode


    const val MEDIA_TYPE_IMAGE = "image"
    const val MEDIA_TYPE_AUDIO = "audio"
    const val MEDIA_TYPE_VIDEO = "video"

    @Retention(AnnotationRetention.SOURCE)
    @StringDef(value = [MEDIA_TYPE_IMAGE, MEDIA_TYPE_AUDIO, MEDIA_TYPE_VIDEO])
    annotation class FileMediaType

    //ÈÄÇÁî®‰∫éÂçïÁã¨Êñá‰ª∂Â§ßÂ∞èÂíåÊÄªÊñá‰ª∂Â§ßÂ∞èÁöÑÊÉÖÂÜµ
    /**
     * Êñá‰ª∂Ë∂ÖËøáÊï∞ÈáèÈôêÂà∂ÂíåÂ§ßÂ∞èÈôêÂà∂Áõ¥Êé•ËøîÂõûÂ§±Ë¥•(onError)
     */
    const val OVER_SIZE_LIMIT_ALL_EXCEPT: Int = 1

    /**
     * Êñá‰ª∂Ë∂ÖËøáÊï∞ÈáèÈôêÂà∂ÂíåÂ§ßÂ∞èÈôêÂà∂‰øùÁïôÊú™Ë∂ÖÈôêÂà∂ÁöÑÊñá‰ª∂Âπ∂ËøîÂõû,ÂéªÊéâÂêéÈù¢Ê∫¢Âá∫ÁöÑÈÉ®ÂàÜ(onSuccess)
     *
     * @since v1.1.0
     * Êñá‰ª∂Ë∂ÖËøáÊï∞ÈáèÈôêÂà∂ÂéªÊéâÊï∞ÈáèÈîôËØØÁöÑÊñá‰ª∂Á±ªÂûã,Â§ßÂ∞èÈôêÂà∂‰øùÁïôÊú™Ë∂ÖÈôêÂà∂ÁöÑÊñá‰ª∂Âπ∂ËøîÂõû,ÂéªÊéâÂêéÈù¢Ê∫¢Âá∫ÁöÑÈÉ®ÂàÜ(onSuccess)
     */
    const val OVER_SIZE_LIMIT_EXCEPT_OVERFLOW_PART: Int = 2

    @Retention(AnnotationRetention.SOURCE)
    @IntDef(value = [OVER_SIZE_LIMIT_ALL_EXCEPT, OVER_SIZE_LIMIT_EXCEPT_OVERFLOW_PART])
    annotation class FileOverSizeStrategy


    /**
     * eg:
     * ```kotlin
     *      val queryStatement = buildQuerySelectionStatement(MEDIA_TYPE_VIDEO,
     *          null, null, null, null, null, false)
     *
     *      queryStatement.append(
     *          "${MediaStore.Video.Media.DURATION} >= ? ",
     *          noNull(TimeUnit.MILLISECONDS.convert(sourceDuration,sourceUnit).toString())
     *      )
     * ```
     */
    data class QuerySelectionStatement(
        val selection: StringBuilder,
        val selectionArgs: MutableList<String>,
        val needAddPre: Boolean,
    ) {
        fun append(selectionNew: String, selectionArgsNew: String) {
            selection.append("${if (needAddPre) " and " else " "} $selectionNew ")
            selectionArgs.add(selectionArgsNew)
        }
    }

    /**
     * ### Âä†ËΩΩÂ™í‰Ωì Âçï‰∏™Â™í‰ΩìÊñá‰ª∂ üëâ ContentResolver.openFileDescriptor
     *
     * Ê†πÊçÆÊñá‰ª∂ÊèèËø∞Á¨¶ÈÄâÊã©ÂØπÂ∫îÁöÑÊâìÂºÄÊñπÂºè„ÄÇ"r"Ë°®Á§∫ËØªÔºå"w"Ë°®Á§∫ÂÜô
     */
    fun openFileDescriptor(
        uri: Uri?,
        @FileOpenMode mode: String = MODE_READ_ONLY,
        cancellationSignal: CancellationSignal? = null,
    ): ParcelFileDescriptor? {
        if (!checkUriFileExit(uri)) return null
        return FileOperator.getContext().contentResolver.openFileDescriptor(uri ?: return null, mode, cancellationSignal)
    }

    /**
     * Ê£ÄÊü• uri ÂØπÂ∫îÁöÑÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
     */
    fun checkUriFileExit(uri: Uri?): Boolean {
        val cursor = FileOperator.getContext().contentResolver.query(uri ?: return false, null, null, null, null)
        if (cursor == null || !cursor.moveToFirst()) {
            FileLogger.e("Âà†Èô§Â§±Ë¥• -> 1.Ê≤°ÊúâÊâæÂà∞ Uri ÂØπÂ∫îÁöÑÊñá‰ª∂ ; 2.ÁõÆÂΩï‰∏∫Á©∫ ")
            return false
        }
        cursor.close()
        return true
    }

    //dump
    //---------------------------------------------------------------------------------

    fun dumpParcelFileDescriptor(pfd: ParcelFileDescriptor?) =
        if (pfd != null) {
            //ËØªÂèñÊàêÂäü : 87  Â§ßÂ∞è:2498324B
            FileLogger.d("ËØªÂèñÊàêÂäü: getStatSize=${pfd.statSize}B")
        } else {
            FileLogger.e("ËØªÂèñÂ§±Ë¥•!")
        }

    /**
     * Ëé∑ÂèñÊñáÊ°£ÂÖÉÊï∞ÊçÆ
     */
    fun dumpMetaData(uri: Uri?, block: ((displayName: String?, size: String?) -> Unit)? = null) {
        val cursor =
            FileOperator.getContext().contentResolver.query(uri ?: return, null, null, null, null)

        cursor?.use {
            while (it.moveToNext()) { // moveToFirst die
                val displayName = it.getString(it.getColumnIndex(OpenableColumns.DISPLAY_NAME))

                val sizeIndex: Int = it.getColumnIndex(OpenableColumns.SIZE)
                val size: String = if (!it.isNull(sizeIndex)) {
                    it.getString(sizeIndex)
                } else "Unknown"
                block?.invoke(displayName, size)
                FileLogger.i("Êñá‰ª∂ÂêçÁß∞ Ôºö$displayName  SizeÔºö$size B")
            }
        }
    }

}